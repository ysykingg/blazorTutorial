@page "/"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject PizzaSalesState SalesState

@using BlazingPizza.Services
@inject OrderState OrderState

<div class="main">

    <h1>Welcome to Blazing Pizzas</h1>
    <p>Today, we've sold this many pizzas: @SalesState.PizzasSoldToday</p>
    <button @onclick="IncrementSales">Buy a Pizza</button>

    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

@if (OrderState.ShowingConfigureDialog)
{
        <ConfigurePizzaDialog 
          Pizza="OrderState.ConfiguringPizza"
          OnCancel="OrderState.CancelConfigurePizzaDialog"
          OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
            <div class="order-contents">
                <h2>Your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
                      <div class="cart-item">
                          <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                          <div class="item-price">
                        @configuredPizza.GetFormattedTotalPrice()
                          </div>
                          <a @onclick="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" class="delete-item">x</a>
                      </div>
            }
            </div>
    }
    else
    {
            <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order >
        </a>
    </div>
</div>

@code {
    List<PizzaSpecial> specials = new();

    Order order => OrderState.Order;
    // Pizza configuringPizza;
    // bool showingConfigureDialog;

    private void IncrementSales()
    {
        SalesState.PizzasSoldToday++;
    }
    //private Pizza[] todaysPizzas;

    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + "specials");
    }

    // void ShowConfigurePizzaDialog(PizzaSpecial special)
    // {
    //     configuringPizza = new Pizza()
    //         {
    //             Special = special,
    //             SpecialId = special.Id,
    //             Size = Pizza.DefaultSize
    //         };

    //     showingConfigureDialog = true;
    // }
    // protected override async Task OnInitializedAsync()
    // {
    //     todaysPizzas = await PizzaSvc.GetPizzasAsync();
    // }
}